#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

LiquidCrystal lcd(6, 7, 5, 4, 3, 2);

//Pinos
#define SS_PIN 10
#define RST_PIN 9

String IDtag = ""; //Variável que armazenará o ID da Tag
bool Permitido = false; //Variável que verifica a permissão
//Vetor responsável por armazenar os ID's das Tag's cadastradas
String TagsCadastradas[] = {"0caf3a7",
                            //"b66198bb",
                           };
MFRC522 LeitorRFID(SS_PIN, RST_PIN);    // Cria uma nova instância para o leitor e passa os pinos como parâmetro
void setup() {
  Serial.begin(9600);             // Inicializa a comunicação Serial
  SPI.begin();                    // Inicializa comunicacao SPI
  LeitorRFID.PCD_Init();          // Inicializa o leitor RFID
  lcd.begin(16, 2); //Define o número de colunas e linhas do LCD:
  mensageminicial();
}

void loop() {
  Leitura();  //Chama a função responsável por fazer a leitura das Tag's
}
void Leitura() {
  IDtag = ""; //Inicialmente IDtag deve estar vazia.

  // Verifica se existe uma Tag presente
  if ( !LeitorRFID.PICC_IsNewCardPresent() || !LeitorRFID.PICC_ReadCardSerial() ) {
    delay(50);
    return;
  }
  // Pega o ID da Tag através da função LeitorRFID.uid e Armazena o ID na variável IDtag
  for (byte i = 0; i < LeitorRFID.uid.size; i++) {
    IDtag.concat(String(LeitorRFID.uid.uidByte[i], HEX));
  }
  //Compara o valor do ID lido com os IDs armazenados no vetor TagsCadastradas[]
  for (int i = 0; i < (sizeof(TagsCadastradas) / sizeof(String)); i++) {
    if (  IDtag.equalsIgnoreCase(TagsCadastradas[i])  ) {
      Permitido = true; //Variável Permitido assume valor verdadeiro caso o ID Lido esteja cadastrado
    }
  }
  if (Permitido == true) acessoLiberado(); //Se a variável Permitido for verdadeira será chamada a função acessoLiberado()
  else acessoNegado(); //Se não será chamada a função acessoNegado()
  delay(2000); //aguarda 2 segundos para efetuar uma nova leitura
}
void acessoLiberado() {
  Serial.println("Tag Cadastrada: " + IDtag); //Exibe a mensagem "Tag Cadastrada" e o ID da tag não cadastrada
  efeitoPermitido();  //Chama a função efeitoPermitido()
  Permitido = false;  //Seta a variável Permitido como false novamente
}
void acessoNegado() {
  Serial.println("Tag nao Cadastrada: " + IDtag); //Exibe a mensagem "Tag NAO Cadastrada" e o ID da tag cadastrada
  efeitoNegado(); //Chama a função efeitoNegado()
}
void efeitoPermitido() {
  lcd.clear();
  lcd.setCursor(0, 0); //Define em qual parte do LCD a mensagem será exibida
  lcd.print("oi, bem vindo(a)");
  lcd.setCursor(0, 1); //Define em qual parte do LCD a mensagem será exibida
  lcd.print("acesso liberado!");
  delay(3000); //aguarda 3 segundos para efetuar uma nova leitura
  lcd.clear();
  mensageminicial();
}

void efeitoNegado() {
  lcd.clear();
  lcd.setCursor(5, 0); //Define em qual parte do LCD a mensagem será exibida
  lcd.print("Lotado!");
  lcd.setCursor(1, 1); //Define em qual parte do LCD a mensagem será exibida
  lcd.print("Acesso negado!");
  delay(3000); //aguarda 3 segundos para efetuar uma nova leitura
  mensageminicial();
}

void mensageminicial()
{
  lcd.clear();
  lcd.print(" aproxime o seu");
  lcd.setCursor(0, 1);
  lcd.print("cartao do leitor");
}